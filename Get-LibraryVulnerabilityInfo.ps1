<#
.SYNOPSIS
Get the list of module/package/library vulnerabilities from the RetireJS or SafeNuGet projects.

.INPUTS
System.String of a package/module name to search for.

.OUTPUTS
System.Management.Automation.PSCustomObject with details about any vulnerabilities found.

.FUNCTIONALITY
Packages and libraries

.LINK
Invoke-RestMethod

.LINK
Select-Xml

.EXAMPLE
Get-LibraryVulnerabilityInfo.ps1 Backbone.js

atOrAbove below identifiers                                                  info
--------- ----- -----------                                                  ----
          0.5.0 @{release=0.5.0; summary=cross-site scripting vulnerability} {http://backbonejs.org/#changelog}


.EXAMPLE
Get-LibraryVulnerabilityInfo.ps1 Backbone.js -Repository nuget

id          before infoUri
--          ------ -------
Backbone.js 0.5.3  http://backbonejs.org/#changelog
#>

#Requires -Version 3
[CmdletBinding()][OutputType([Management.Automation.PSCustomObject])] Param(
# The name of the module or package or library to check.
[Parameter(Position=0,Mandatory=$true,ValueFromPipeline=$true)]
[Alias('Module','Package','Library')][string]$Name,
# Whether to check the NPM, JS, or NuGet vulnerability lists.
[ValidateSet('js','npm','nuget')][string]$Repository = 'js'
)
Process
{
    if($Repository -eq 'nuget')
    {
        Invoke-RestMethod https://raw.githubusercontent.com/OWASP/SafeNuGet/master/feed/unsafepackages.xml |
            Select-Xml //package |
            Select-Object -ExpandProperty Node |
            Where-Object {$_.id -eq $Name} |
            ForEach-Object {[pscustomobject]@{id=$_.id;before=$_.before;infoUri=$_.infoUri}}
    }
    else
    {
        $lib = Invoke-RestMethod https://raw.githubusercontent.com/RetireJS/retire.js/master/repository/${Repository}repository.json
        if($lib.$Name) {$lib.$Name.vulnerabilities |Select-Object atOrAbove,below,identifiers,info}
        else {Write-Warning "$Name not found"}
    }
}

